require 'rails_helper'
require 'securerandom'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe NodesController, type: :controller do


  describe "GET #index" do
    context "for six existing valid nodes" do
      context "Without excludeAttributes or includeAttributes parameters" do
        before :each do
          @nodes = (0..5).map {|n| create :valid_node}
          get :index
        end

        it "must assign an Array to @nodes" do
          expect(@nodes).to be_a(Array)
        end

        it "must store all six nodes " do
          expect(@nodes.count).to eq(6)
        end

        it "all nodes in @nodes must be valid" do
          @nodes.each do |node|
            expect(node).to be_valid(Node)
          end
        end

        it "must render have HTTP Status 200 (ok)" do
          expect(response).to have_http_status(:success)
        end

      end
      context "With includeAttributes parameters" do
        before :each do
          @includeAttributes = %i(
          accessState
          canisters
          canisterSlots)

          @nodes = (0..5).map {|n| create :valid_node}
          get :index, {includeAttributes:  @includeAttributes.join(",")}
        end

        it "must assign an array to @nodes" do
          expect(@nodes).to be_a(Array)
        end

        it "must store all six nodes assigned to @nodes" do
          expect(@nodes.count).to eq(6)
        end

        it "All nodes have the attributes included" do
          assigns(:nodes).each do |node|
            @includeAttributes.each do |attribute|
              expect(node.properties.has_key? attribute).to eq(true)
            end
          end
        end

        it "All nodes doesn't have all other attributes" do
          assigns(:nodes).each do |node|
            absent = NodesHelper::required_fields - @includeAttributes
            absent.each do |attribute|
              expect(node.properties.has_key? attribute).to eq(false)
            end
          end
        end

        it "must render have HTTP Status 200 (OK)" do
          expect(response).to have_http_status(:success)
        end
      end

      context "With excludeAttributes parameters" do
        before :each do
          @excludeAttributes = %i(
          description
          hardwareRevision
          dataHandle
          )
          @nodes = (0..5).map {|n| create :valid_node}
          get :index, {excludeAttributes: @excludeAttributes.join(",")}
        end

        it "must assign an Array to @nodes" do
          expect(@nodes).to be_a(Array)
        end

        it "must store all six nodes assigned to @nodes" do
          expect(@nodes.count).to eq(6)
        end

        it "All nodes doesn't have the attributes excluded" do
          assigns(:nodes).each do |node|
            @excludeAttributes.each do |attribute|
              expect(node.properties.has_key? attribute).to eq(false)
            end
          end
        end

        it "must render have HTTP Status 200 (OK)" do
          expect(response).to have_http_status(:success)
        end
      end

      context "With status parameter"do
      before :each do
        @nodes = (0..5).map {|n| create :valid_node}
        get :index, status: 'managed'
      end

      it "All nodes have the status managed" do
        assigns(:nodes).each do |node|
          expect(node.properties.deep_symbolize_keys[:status][:message]).to eq('managed')
        end
      end
    end

    context "With status parameter "do
    before :each do
      @nodes = (0..5).map {|n| create :valid_node}
      get :index, status: 'unmanaged'
    end

    it "All nodes have the status unmanaged" do
      assigns(:nodes).each do |node|
        expect(node.properties.deep_symbolize_keys[:status][:message]).to eq('unmanaged')
      end
    end
  end

  context "with format type parameter" do
    before :each do
      @nodes = (0..5).map {|n| create :valid_node}
      get :index, formatType: 'json'
    end

    it "Nodes returned with format json" do
      expect(response.content_type).to eq('application/json')
    end

  end

end

end

describe "GET #show" do

  context "Fetching existing nodes" do
    context "Without excludeAttributes or includeAttributes parameters" do
      before :each do
        @nodes = (0..5).map {|n| create :valid_node}
      end

      it "All nodes can be fetched individually" do
        @nodes.each do |node|
          get :show, {id: node._id}
          expect(response).to have_http_status(:success)
        end
      end

      it "All nodes are valid" do
        @nodes.each do |node|
          get :show, {id: node._id}
          expect(node).to be_valid(Node)
        end
      end
    end

    context "With excludeAttributes parameters" do
      before :each do
        @excludeAttributes = %i(
        description
        hardwareRevision
        dataHandle
        )
        @nodes = (0..5).map {|n| create :valid_node}
      end

      it "All nodes can be fetched individually" do
        @nodes.each do |node|
          get :show, {
            id: node._id,
            excludeAttributes: @excludeAttributes.join(",")
          }
          expect(response).to have_http_status(:success)
        end
      end

      # it "All nodes doesn't have the attributes excluded" do
      #   @nodes.each do |node|
      #     get :show, {
      #       id: node._id,
      #       excludeAttributes: @excludeAttributes.join(",")
      #     }
      #     @excludeAttributes.each do |attribute|
      #       node_properties = node.properties
      #       expect(node_properties.has_key? attribute).to eq(false)
      #     end
      #   end
      # end
    end

    context "With includeAttributes parameters" do
      before :each do
        @includeAttributes = %i(
        accessState
        canisters
        canisterSlots
        )
        @nodes = (0..5).map {|n| create :valid_node}
      end

      it "All nodehod `valid?' s can be fetched individually" do
        @nodes.each do |node|
          get :show, {
            id: node._id,
            includeAttributes: @includeAttributes.join(",")
          }
          expect(response).to have_http_status(:success)
        end
      end

      it "All nodes have the attributes included" do
        @nodes.each do |node|
          get :show, {
            id: node._id,
            includeAttributes: @includeAttributes.join(",")
          }
          @includeAttributes.each do |attribute|
            node_properties = node.properties
            expect(node_properties.has_key? attribute).to eq(true)
          end
        end
      end

      # it "All nodes doesn't have other attributes" do
      #   @nodes.each do |node|
      #     get :show, {
      #       id: node._id,
      #       includeAttributes: @includeAttributes.join(",")
      #     }
      #     absent = NodesHelper::required_fields - @includeAttributes
      #     absent.each do |attribute|
      #       node_properties = node.properties
      #       expect(node_properties.has_key? attribute).to eq(false)
      #     end
      #   end
      # end
    end
  end

  context "Fetching unexisting nodes" do
    before :each do
      @random_id = SecureRandom.hex.upcase
      get :show, {id: @random_id}
    end

    it "Returns HTTP Status Code 404 (Not Found)" do
      expect(response).to have_http_status(:not_found)
    end

    it "Expects to assign nil to @node in action" do
      expect(@node).to be_nil
    end
  end


end

end
